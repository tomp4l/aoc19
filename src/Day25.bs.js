// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Intcode$Aoc19 = require("./Intcode.bs.js");
var Relude_String = require("relude/src/Relude_String.bs.js");
var Readline$Aoc19 = require("./lib/Readline.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");

function output(s) {
  var i = Caml_format.caml_int_of_string(s);
  if (i < 256) {
    process.stdout.write($$String.make(1, Char.chr(i)));
  } else {
    console.log(i);
  }
  
}

function strToIntcode(s) {
  return String(Caml_string.get(s, 0));
}

function run(intcode) {
  var nextCommand = {
    contents: /* [] */0
  };
  var nextInput = function (param) {
    var match = nextCommand.contents;
    if (match) {
      nextCommand.contents = match.tl;
      return StackSafeFuture$Aoc19.pure(match.hd);
    }
    var readline = Readline$Aoc19.make(undefined);
    return StackSafeFuture$Aoc19.map((function (s) {
                  var match = Relude_String.toList(s);
                  if (match) {
                    nextCommand.contents = Relude_List.append("10", Relude_List.map(strToIntcode)(match.tl));
                    return String(Caml_string.get(match.hd, 0));
                  } else {
                    return "10";
                  }
                }), StackSafeFuture$Aoc19.tap(function (param) {
                      readline.close();
                      
                    })(Readline$Aoc19.question(readline, "input dear human\n")));
  };
  return Intcode$Aoc19.run(nextInput, output, intcode);
}

var Droid = {
  output: output,
  strToIntcode: strToIntcode,
  run: run
};

var input = InputLoader$Aoc19.commaSeparated(25);

Curry._2(StackSafeFuture$Aoc19.flatMap, run, input);

exports.Droid = Droid;
exports.input = input;
/* input Not a pure module */
