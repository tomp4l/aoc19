// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Relude_Int = require("relude/src/Relude_Int.bs.js");
var Coord$Aoc19 = require("./lib/Coord.bs.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Intcode$Aoc19 = require("./Intcode.bs.js");
var Relude_Option = require("relude/src/Relude_Option.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");

function directionToInt(param) {
  switch (param) {
    case /* North */0 :
        return 1;
    case /* South */1 :
        return 2;
    case /* East */2 :
        return 4;
    case /* West */3 :
        return 3;
    
  }
}

function move(param, param$1) {
  var y = param[1];
  var x = param[0];
  switch (param$1) {
    case /* North */0 :
        return [
                x,
                y - 1 | 0
              ];
    case /* South */1 :
        return [
                x,
                y + 1 | 0
              ];
    case /* East */2 :
        return [
                x + 1 | 0,
                y
              ];
    case /* West */3 :
        return [
                x - 1 | 0,
                y
              ];
    
  }
}

function roomToDisplay(param) {
  switch (param) {
    case /* Unknown */0 :
        return " ";
    case /* Wall */1 :
        return "#";
    case /* Floor */2 :
        return ".";
    case /* OxygenSystem */3 :
        return "O";
    
  }
}

function get(c) {
  var partial_arg = Curry._1(Coord$Aoc19.CoordMap.get, c);
  return function (param) {
    return Relude_Function.flipCompose(partial_arg, (function (param) {
                  return Relude_Option.getOrElse(/* Unknown */0, param);
                }), param);
  };
}

var reveal = Coord$Aoc19.CoordMap.set;

function make(p, r) {
  return Curry._3(reveal, p, r, Curry._1(Coord$Aoc19.CoordMap.make, undefined));
}

function drawShip(param) {
  return Coord$Aoc19.output(roomToDisplay, /* Unknown */0, param);
}

var Ship = {
  get: get,
  reveal: reveal,
  make: make,
  drawShip: drawShip
};

var UnknownInput = Caml_exceptions.create("Day15-Aoc19.Robot.UnknownInput");

function nextDirection(ship, position, history) {
  var c = move(position, /* North */0);
  var n = get(c)(ship);
  var c$1 = move(position, /* South */1);
  var s = get(c$1)(ship);
  var c$2 = move(position, /* East */2);
  var e = get(c$2)(ship);
  var c$3 = move(position, /* West */3);
  var w = get(c$3)(ship);
  if (n !== 0) {
    if (s !== 0) {
      if (e !== 0) {
        if (w !== 0) {
          return Relude_Option.getOrElse([
                      /* West */3,
                      /* [] */0
                    ], Relude_Option.map((function (d) {
                            return [
                                    d,
                                    Relude_List.tailOrEmpty(history)
                                  ];
                          }), Relude_Option.map((function (d) {
                                switch (d) {
                                  case /* North */0 :
                                      return /* South */1;
                                  case /* South */1 :
                                      return /* North */0;
                                  case /* East */2 :
                                      return /* West */3;
                                  case /* West */3 :
                                      return /* East */2;
                                  
                                }
                              }), Relude_List.head(history))));
        } else {
          return [
                  /* West */3,
                  {
                    hd: /* West */3,
                    tl: history
                  }
                ];
        }
      } else {
        return [
                /* East */2,
                {
                  hd: /* East */2,
                  tl: history
                }
              ];
      }
    } else {
      return [
              /* South */1,
              {
                hd: /* South */1,
                tl: history
              }
            ];
    }
  } else {
    return [
            /* North */0,
            {
              hd: /* North */0,
              tl: history
            }
          ];
  }
}

function findOxygenSystem(displayOpt, delayOpt, findSensor, input) {
  var display = displayOpt !== undefined ? displayOpt : false;
  var delay = delayOpt !== undefined ? delayOpt : 0;
  return StackSafeFuture$Aoc19.make(function (resolve) {
              var position = {
                contents: [
                  0,
                  0
                ]
              };
              var lastMove = {
                contents: /* East */2
              };
              var ship = {
                contents: make(position.contents, /* Floor */2)
              };
              var history = {
                contents: /* [] */0
              };
              var totalDistance = {
                contents: 0
              };
              var maxDistance = {
                contents: 0
              };
              var found = {
                contents: false
              };
              var finished = {
                contents: false
              };
              var nextInput = function (param) {
                var match = finished.contents;
                if (match) {
                  return StackSafeFuture$Aoc19.never(undefined);
                } else if (delay !== 0) {
                  return StackSafeFuture$Aoc19.delay(delay, (function (param) {
                                return String(directionToInt(lastMove.contents));
                              }));
                } else {
                  return StackSafeFuture$Aoc19.pure(String(directionToInt(lastMove.contents)));
                }
              };
              var nextOutput = function (v) {
                switch (v) {
                  case "0" :
                      var attempt = move(position.contents, lastMove.contents);
                      ship.contents = Curry._3(reveal, attempt, /* Wall */1, ship.contents);
                      history.contents = Relude_List.tailOrEmpty(history.contents);
                      break;
                  case "1" :
                      position.contents = move(position.contents, lastMove.contents);
                      var match = get(position.contents)(ship.contents);
                      if (match !== 0) {
                        totalDistance.contents = totalDistance.contents - 1 | 0;
                      } else {
                        totalDistance.contents = totalDistance.contents + 1 | 0;
                      }
                      ship.contents = Curry._3(reveal, position.contents, /* Floor */2, ship.contents);
                      break;
                  case "2" :
                      position.contents = move(position.contents, lastMove.contents);
                      ship.contents = Curry._3(reveal, position.contents, /* OxygenSystem */3, ship.contents);
                      if (findSensor) {
                        finished.contents = true;
                        Curry._1(resolve, totalDistance.contents + 1 | 0);
                      } else if (found.contents) {
                        finished.contents = true;
                        Curry._1(resolve, maxDistance.contents);
                      } else {
                        ship.contents = make(position.contents, /* OxygenSystem */3);
                        history.contents = /* [] */0;
                        totalDistance.contents = 0;
                        maxDistance.contents = 0;
                        found.contents = true;
                      }
                      break;
                  default:
                    throw {
                          RE_EXN_ID: UnknownInput,
                          _1: v,
                          Error: new Error()
                        };
                }
                var match$1 = nextDirection(ship.contents, position.contents, history.contents);
                lastMove.contents = match$1[0];
                history.contents = match$1[1];
                maxDistance.contents = Curry._2(Relude_Int.max, maxDistance.contents, totalDistance.contents);
                if (display) {
                  console.log("");
                  Coord$Aoc19.output(roomToDisplay, /* Unknown */0, ship.contents);
                  console.log("distance", totalDistance.contents);
                }
                
              };
              Intcode$Aoc19.run(nextInput, nextOutput, input);
              
            });
}

var Robot = {
  UnknownInput: UnknownInput,
  nextDirection: nextDirection,
  findOxygenSystem: findOxygenSystem
};

var input = InputLoader$Aoc19.commaSeparated(15);

StackSafeFuture$Aoc19.tap(function (param) {
        console.log("Position", param);
        
      })(Curry._2(StackSafeFuture$Aoc19.flatMap, (function (param) {
            return findOxygenSystem(undefined, undefined, true, param);
          }), input));

StackSafeFuture$Aoc19.tap(function (param) {
        console.log("Time for oxygen to diffuse", param);
        
      })(Curry._2(StackSafeFuture$Aoc19.flatMap, (function (param) {
            return findOxygenSystem(undefined, undefined, false, param);
          }), input));

var CoordMap;

var $great$great = Relude_Function.flipCompose;

exports.CoordMap = CoordMap;
exports.$great$great = $great$great;
exports.directionToInt = directionToInt;
exports.move = move;
exports.roomToDisplay = roomToDisplay;
exports.Ship = Ship;
exports.Robot = Robot;
exports.input = input;
/* input Not a pure module */
