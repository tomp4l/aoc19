// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Relude_String = require("relude/src/Relude_String.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");
var Relude_List_Specializations = require("relude/src/list/Relude_List_Specializations.bs.js");

function mask(size, pass) {
  var unitSize = (pass << 2);
  return Relude_List.tailOrEmpty(Relude_List.makeWithIndex(size + 1 | 0, (function (i) {
                    var x = Caml_int32.div(i, unitSize);
                    var y = i - Math.imul(x, unitSize) | 0;
                    if (y < pass) {
                      return 0;
                    } else if (y < (pass << 1)) {
                      return 1;
                    } else if (y < Math.imul(3, pass)) {
                      return 0;
                    } else {
                      return -1;
                    }
                  })));
}

function lastDigit(d) {
  return Caml_format.caml_int_of_string(Relude_String.sliceToEnd(-1, String(d)));
}

function pass(size, pass$1, number) {
  var mask$1 = mask(size, pass$1);
  return lastDigit(Curry._1(Relude_List_Specializations.Int.sum, Relude_List.map(function (param) {
                        return Math.imul(param[0], param[1]);
                      })(Relude_List.zip(mask$1, number))));
}

function phase(size, number) {
  var _p = size;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var p = _p;
    if (p === 0) {
      return acc;
    }
    var pass$1 = pass(size, p, number);
    _acc = {
      hd: pass$1,
      tl: acc
    };
    _p = p - 1 | 0;
    continue ;
  };
}

function phases(amount, size, number) {
  var _amount = amount;
  var _number = number;
  while(true) {
    var number$1 = _number;
    var amount$1 = _amount;
    if (amount$1 <= 0) {
      return number$1;
    }
    _number = phase(size, number$1);
    _amount = amount$1 - 1 | 0;
    continue ;
  };
}

function repeatList(amount, list) {
  var reversed = Relude_List.reverse(list);
  var prepend = function (_reversed, _acc) {
    while(true) {
      var acc = _acc;
      var reversed = _reversed;
      if (!reversed) {
        return acc;
      }
      _acc = {
        hd: reversed.hd,
        tl: acc
      };
      _reversed = reversed.tl;
      continue ;
    };
  };
  var _amount = amount;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var amount$1 = _amount;
    if (amount$1 === 0) {
      return acc;
    }
    _acc = prepend(reversed, acc);
    _amount = amount$1 - 1 | 0;
    continue ;
  };
}

function digitsAtOffsetForPhase(numberFromOffset) {
  var reversed = Relude_List.reverse(numberFromOffset);
  var _remainingDigits = reversed;
  var _acc = /* [] */0;
  var _prev = 0;
  while(true) {
    var prev = _prev;
    var acc = _acc;
    var remainingDigits = _remainingDigits;
    if (!remainingDigits) {
      return acc;
    }
    var sum = lastDigit(prev + remainingDigits.hd | 0);
    _prev = sum;
    _acc = {
      hd: sum,
      tl: acc
    };
    _remainingDigits = remainingDigits.tl;
    continue ;
  };
}

function digitsAtOffset(amount, repition, offset, number) {
  var repeated = repeatList(repition, number);
  var fromOffset = Relude_List.drop(offset, repeated);
  var _amount = amount;
  var _number = fromOffset;
  while(true) {
    var number$1 = _number;
    var amount$1 = _amount;
    if (amount$1 <= 0) {
      return number$1;
    }
    _number = digitsAtOffsetForPhase(number$1);
    _amount = amount$1 - 1 | 0;
    continue ;
  };
}

var input = InputLoader$Aoc19.intList(16);

StackSafeFuture$Aoc19.tap(function (number) {
        console.log("First 8", Curry._1(Relude_List_Specializations.$$String.join, Relude_List.map(function (prim) {
                        return String(prim);
                      })(Relude_List.take(8, phases(100, Curry._1(Relude_List.length, number), number)))));
        
      })(input);

StackSafeFuture$Aoc19.tap(function (number) {
        console.log("Offset 8", Curry._1(Relude_List_Specializations.$$String.join, Relude_List.map(function (prim) {
                        return String(prim);
                      })(Relude_List.take(8, digitsAtOffset(100, 10000, Caml_format.caml_int_of_string(Curry._1(Relude_List_Specializations.$$String.join, Relude_List.map(function (prim) {
                                            return String(prim);
                                          })(Relude_List.take(7, number)))), number)))));
        
      })(input);

exports.mask = mask;
exports.lastDigit = lastDigit;
exports.pass = pass;
exports.phase = phase;
exports.phases = phases;
exports.repeatList = repeatList;
exports.digitsAtOffsetForPhase = digitsAtOffsetForPhase;
exports.digitsAtOffset = digitsAtOffset;
exports.input = input;
/* input Not a pure module */
