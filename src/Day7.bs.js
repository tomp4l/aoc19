// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Intcode$Aoc19 = require("./Intcode.bs.js");
var Relude_Option = require("relude/src/Relude_Option.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");
var Relude_List_Specializations = require("relude/src/list/Relude_List_Specializations.bs.js");

function combinations(a, b) {
  return Curry._2(Relude_List.flatMap, (function (a) {
                return Relude_List.map((function (b) {
                                return /* tuple */[
                                        a,
                                        b
                                      ];
                              }))(b);
              }), a);
}

function allInputs(viableInputs) {
  var allDifferent = function (param) {
    return Caml_obj.caml_equal(Relude_List_Specializations.$$String.sort(/* :: */[
                    param[0],
                    /* :: */[
                      param[1],
                      /* :: */[
                        param[2],
                        /* :: */[
                          param[3],
                          /* :: */[
                            param[4],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]), Relude_List_Specializations.$$String.sort(viableInputs));
  };
  return Relude_List.filter(allDifferent, Relude_List.map((function (param) {
                      var match = param[1];
                      var match$1 = match[1];
                      var match$2 = match$1[1];
                      return /* tuple */[
                              match$2[1],
                              match$2[0],
                              match$1[0],
                              match[0],
                              param[0]
                            ];
                    }))(combinations(viableInputs, combinations(viableInputs, combinations(viableInputs, combinations(viableInputs, viableInputs))))));
}

var input = InputLoader$Aoc19.commaSeparated(7);

var NoMoreInput = Caml_exceptions.create("Day7-Aoc19.NoMoreInput");

function programmed(input, inputs) {
  var inputsRef = {
    contents: inputs
  };
  var nextInput = function (param) {
    var match = inputsRef.contents;
    if (match) {
      inputsRef.contents = match[1];
      return StackSafeFuture$Aoc19.pure(match[0]);
    } else {
      console.error("No more input");
      throw NoMoreInput;
    }
  };
  return StackSafeFuture$Aoc19.make((function (resolve) {
                Intcode$Aoc19.run(nextInput, resolve, input);
                return /* () */0;
              }));
}

function runInput(computer, a, b, c, d, e) {
  var a$prime = Curry._1(computer, /* :: */[
        a,
        /* :: */[
          "0",
          /* [] */0
        ]
      ]);
  var b$prime = Curry._2(StackSafeFuture$Aoc19.flatMap, (function (a$prime) {
          return Curry._1(computer, /* :: */[
                      b,
                      /* :: */[
                        a$prime,
                        /* [] */0
                      ]
                    ]);
        }), a$prime);
  var c$prime = Curry._2(StackSafeFuture$Aoc19.flatMap, (function (b$prime) {
          return Curry._1(computer, /* :: */[
                      c,
                      /* :: */[
                        b$prime,
                        /* [] */0
                      ]
                    ]);
        }), b$prime);
  var d$prime = Curry._2(StackSafeFuture$Aoc19.flatMap, (function (c$prime) {
          return Curry._1(computer, /* :: */[
                      d,
                      /* :: */[
                        c$prime,
                        /* [] */0
                      ]
                    ]);
        }), c$prime);
  return Curry._2(StackSafeFuture$Aoc19.flatMap, (function (d$prime) {
                return Curry._1(computer, /* :: */[
                            e,
                            /* :: */[
                              d$prime,
                              /* [] */0
                            ]
                          ]);
              }), d$prime);
}

function maxOutput(input) {
  var runUncurried = function (param) {
    return Relude_Function.uncurry5((function (param, param$1, param$2, param$3, param$4) {
                  return runInput((function (param) {
                                return programmed(input, param);
                              }), param, param$1, param$2, param$3, param$4);
                }), param);
  };
  return StackSafeFuture$Aoc19.map(Relude_List_Specializations.Int.max, StackSafeFuture$Aoc19.map(Relude_List.map(Caml_format.caml_int_of_string), Curry._1(StackSafeFuture$Aoc19.all, Relude_List.map(runUncurried)(allInputs(/* :: */[
                              "0",
                              /* :: */[
                                "1",
                                /* :: */[
                                  "2",
                                  /* :: */[
                                    "3",
                                    /* :: */[
                                      "4",
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ])))));
}

function makeLinkedComputer(input, $$const, in_, out) {
  var useConst = {
    contents: true
  };
  var nextInput = function (param) {
    var match = useConst.contents;
    if (match) {
      useConst.contents = false;
      return StackSafeFuture$Aoc19.pure($$const);
    } else {
      return Curry._1(in_, /* () */0);
    }
  };
  return Intcode$Aoc19.run(nextInput, out, input);
}

function pure(v) {
  return {
          contents: /* :: */[
            v,
            /* [] */0
          ]
        };
}

function push(a, s) {
  s.contents = /* :: */[
    a,
    s.contents
  ];
  return /* () */0;
}

function peek(s) {
  return Relude_Option.getOrThrow(Relude_List.last(s.contents));
}

function pop(s) {
  var last = Relude_Option.getOrThrow(Relude_List.last(s.contents));
  var init = Relude_List.initOrEmpty(s.contents);
  s.contents = init;
  return last;
}

var Stack = {
  pure: pure,
  push: push,
  peek: peek,
  pop: pop
};

function futureAndResolve(param) {
  var res = {
    contents: (function (param) {
        return /* () */0;
      })
  };
  var fut = StackSafeFuture$Aoc19.make((function (param) {
          res.contents = param;
          return /* () */0;
        }));
  return /* FutureAndResponse */[
          fut,
          res.contents
        ];
}

function makeIn(stack, param) {
  var match = Relude_Option.getOrThrow(Relude_List.last(stack.contents));
  push(futureAndResolve(/* () */0), stack);
  return match[0];
}

function makeOut(stack, v) {
  var match = pop(stack);
  return Curry._1(match[1], v);
}

function tieFeedbackLoop(lastOutV, lastStack) {
  var first = {
    contents: true
  };
  var lastOut = function (v) {
    lastOutV.contents = v;
    return makeOut(lastStack, v);
  };
  var firstIn = function (param) {
    var firstIn$1 = makeIn(lastStack, /* () */0);
    if (first.contents) {
      first.contents = false;
      lastOut("0");
    }
    return firstIn$1;
  };
  return /* tuple */[
          lastOut,
          firstIn
        ];
}

function feedbackN(input, ns) {
  var lastOutV = {
    contents: "0"
  };
  var stacks = Relude_List.map((function (param) {
            var v = futureAndResolve(/* () */0);
            return {
                    contents: /* :: */[
                      v,
                      /* [] */0
                    ]
                  };
          }))(ns);
  var lastStack = Relude_Option.getOrThrow(Relude_List.last(stacks));
  var match = tieFeedbackLoop(lastOutV, lastStack);
  var outs = Relude_List.append(match[0], Relude_List.map(makeOut)(Relude_List.initOrEmpty(stacks)));
  var ins_000 = match[1];
  var ins_001 = Relude_List.map(makeIn)(Relude_List.initOrEmpty(stacks));
  var ins = /* :: */[
    ins_000,
    ins_001
  ];
  var computers = Relude_List.map((function (param) {
            var match = param[1];
            return makeLinkedComputer(input, param[0], match[0], match[1]);
          }))(Relude_List.zip(ns, Relude_List.zip(ins, outs)));
  return StackSafeFuture$Aoc19.map((function (param) {
                return lastOutV.contents;
              }), Curry._1(StackSafeFuture$Aoc19.all, computers));
}

function feedback5(input, param) {
  return feedbackN(input, /* :: */[
              param[0],
              /* :: */[
                param[1],
                /* :: */[
                  param[2],
                  /* :: */[
                    param[3],
                    /* :: */[
                      param[4],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function maxOutputWithFeedback(input) {
  var runUncurried = function (param) {
    return feedback5(input, param);
  };
  return StackSafeFuture$Aoc19.map(Relude_List_Specializations.Int.max, StackSafeFuture$Aoc19.map(Relude_List.map(Caml_format.caml_int_of_string), Curry._1(StackSafeFuture$Aoc19.all, Relude_List.map(runUncurried)(allInputs(/* :: */[
                              "5",
                              /* :: */[
                                "6",
                                /* :: */[
                                  "7",
                                  /* :: */[
                                    "8",
                                    /* :: */[
                                      "9",
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ])))));
}

StackSafeFuture$Aoc19.tap((function (param) {
          console.log("Max output no feedback", param);
          return /* () */0;
        }))(Curry._2(StackSafeFuture$Aoc19.flatMap, maxOutput, input));

StackSafeFuture$Aoc19.tap((function (param) {
          console.log("Max output with feedback", param);
          return /* () */0;
        }))(Curry._2(StackSafeFuture$Aoc19.flatMap, maxOutputWithFeedback, input));

var List = /* alias */0;

var $$Option = /* alias */0;

var $$Function = /* alias */0;

exports.List = List;
exports.$$Option = $$Option;
exports.$$Function = $$Function;
exports.combinations = combinations;
exports.allInputs = allInputs;
exports.input = input;
exports.NoMoreInput = NoMoreInput;
exports.programmed = programmed;
exports.runInput = runInput;
exports.maxOutput = maxOutput;
exports.makeLinkedComputer = makeLinkedComputer;
exports.Stack = Stack;
exports.futureAndResolve = futureAndResolve;
exports.makeIn = makeIn;
exports.makeOut = makeOut;
exports.tieFeedbackLoop = tieFeedbackLoop;
exports.feedbackN = feedbackN;
exports.feedback5 = feedback5;
exports.maxOutputWithFeedback = maxOutputWithFeedback;
/* input Not a pure module */
