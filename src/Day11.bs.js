// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Coord$Aoc19 = require("./lib/Coord.bs.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Intcode$Aoc19 = require("./Intcode.bs.js");
var Relude_Option = require("relude/src/Relude_Option.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");

function rotate(d, r) {
  switch (d) {
    case /* Up */0 :
        if (r) {
          return /* Left */2;
        } else {
          return /* Right */3;
        }
    case /* Down */1 :
        if (r) {
          return /* Right */3;
        } else {
          return /* Left */2;
        }
    case /* Left */2 :
        if (r) {
          return /* Down */1;
        } else {
          return /* Up */0;
        }
    case /* Right */3 :
        if (r) {
          return /* Up */0;
        } else {
          return /* Down */1;
        }
    
  }
}

function move(param, d) {
  var match;
  switch (d) {
    case /* Up */0 :
        match = [
          0,
          -1
        ];
        break;
    case /* Down */1 :
        match = [
          0,
          1
        ];
        break;
    case /* Left */2 :
        match = [
          -1,
          0
        ];
        break;
    case /* Right */3 :
        match = [
          1,
          0
        ];
        break;
    
  }
  return [
          param[0] + match[0] | 0,
          param[1] + match[1] | 0
        ];
}

function colorToInt(c) {
  if (c) {
    return 0;
  } else {
    return 1;
  }
}

function colorToDisplay(c) {
  if (c) {
    return " ";
  } else {
    return "#";
  }
}

var UnknownInput = Caml_exceptions.create("Day11-Aoc19.UnknownInput");

function intToColor(i) {
  if (i === 0) {
    return /* Black */1;
  }
  if (i === 1) {
    return /* White */0;
  }
  throw {
        RE_EXN_ID: UnknownInput,
        _1: i,
        Error: new Error()
      };
}

function intToRotation(i) {
  if (i === 0) {
    return /* Anticlockwise */1;
  }
  if (i === 1) {
    return /* Clockwise */0;
  }
  throw {
        RE_EXN_ID: UnknownInput,
        _1: i,
        Error: new Error()
      };
}

function get(c) {
  var partial_arg = Curry._1(Coord$Aoc19.CoordMap.get, c);
  return function (param) {
    return Relude_Function.flipCompose(partial_arg, (function (param) {
                  return Relude_Option.getOrElse(/* Black */1, param);
                }), param);
  };
}

var paint = Coord$Aoc19.CoordMap.set;

function make(c) {
  return Curry._3(paint, [
              0,
              0
            ], c, Curry._1(Coord$Aoc19.CoordMap.make, undefined));
}

function totalPainted(param) {
  return Relude_Function.flipCompose(Coord$Aoc19.CoordMap.keys, Relude_List.length, param);
}

function drawShip(param) {
  return Coord$Aoc19.output(colorToDisplay, /* Black */1, param);
}

var Ship = {
  get: get,
  paint: paint,
  make: make,
  totalPainted: totalPainted,
  drawShip: drawShip
};

var initial = {
  position: [
    0,
    0
  ],
  direction: /* Up */0,
  isPainting: true
};

function doPaint(color, robot, ship) {
  return [
          Curry._3(paint, robot.position, color, ship),
          {
            position: robot.position,
            direction: robot.direction,
            isPainting: false
          }
        ];
}

function doRotateAndMove(rotation, robot) {
  var nextDirection = rotate(robot.direction, rotation);
  var nextPosition = move(robot.position, nextDirection);
  return {
          position: nextPosition,
          direction: nextDirection,
          isPainting: true
        };
}

function paintShip(start, input) {
  var robot = {
    contents: initial
  };
  var ship = {
    contents: make(start)
  };
  var nextInput = function (param) {
    var match = robot.contents;
    var c = get(match.position)(ship.contents);
    return StackSafeFuture$Aoc19.pure(String(c ? 0 : 1));
  };
  var nextOutput = function (string) {
    var v = Caml_format.caml_int_of_string(string);
    var match = robot.contents;
    var match$1 = match.isPainting ? doPaint(intToColor(v), robot.contents, ship.contents) : [
        ship.contents,
        doRotateAndMove(intToRotation(v), robot.contents)
      ];
    ship.contents = match$1[0];
    robot.contents = match$1[1];
    
  };
  return StackSafeFuture$Aoc19.map((function (param) {
                return ship.contents;
              }), Intcode$Aoc19.run(nextInput, nextOutput, input));
}

var Robot = {
  initial: initial,
  doPaint: doPaint,
  doRotateAndMove: doRotateAndMove,
  paintShip: paintShip
};

var input = InputLoader$Aoc19.commaSeparated(11);

StackSafeFuture$Aoc19.tap(drawShip)(StackSafeFuture$Aoc19.tap(function (param) {
            console.log("Proper job:");
            
          })(Curry._2(StackSafeFuture$Aoc19.flatMap, (function (param) {
                return paintShip(/* White */0, param);
              }), Curry._2(StackSafeFuture$Aoc19.flatMap, (function (param) {
                    return input;
                  }), StackSafeFuture$Aoc19.tap(function (param) {
                        return Relude_Function.flipCompose(totalPainted, (function (param) {
                                      console.log("Total painted", param);
                                      
                                    }), param);
                      })(Curry._2(StackSafeFuture$Aoc19.flatMap, (function (param) {
                            return paintShip(/* Black */1, param);
                          }), input))))));

var CoordMap;

var $great$great = Relude_Function.flipCompose;

exports.CoordMap = CoordMap;
exports.$great$great = $great$great;
exports.rotate = rotate;
exports.move = move;
exports.colorToInt = colorToInt;
exports.colorToDisplay = colorToDisplay;
exports.UnknownInput = UnknownInput;
exports.intToColor = intToColor;
exports.intToRotation = intToRotation;
exports.Ship = Ship;
exports.Robot = Robot;
exports.input = input;
/* input Not a pure module */
