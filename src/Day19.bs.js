// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Relude_Int = require("relude/src/Relude_Int.bs.js");
var Intcode$Aoc19 = require("./Intcode.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");

function runCoordinate(intCode, x, y) {
  var sendX = {
    contents: true
  };
  var out = {
    contents: 0
  };
  var nextInput = function (param) {
    return StackSafeFuture$Aoc19.pure(String(sendX.contents ? (sendX.contents = false, x) : y));
  };
  var nextOutput = function (s) {
    if (s === "1") {
      out.contents = 1;
      return ;
    }
    
  };
  return StackSafeFuture$Aoc19.map((function (param) {
                return out.contents;
              }), Intcode$Aoc19.run(nextInput, nextOutput, intCode));
}

function scanBeam(intCode) {
  var scanBeam$prime = function (_x, _y, count) {
    while(true) {
      var y = _y;
      var x = _x;
      if (x === 49 && y === 50) {
        return StackSafeFuture$Aoc19.pure(count);
      }
      if (y !== 50) {
        return Curry._2(StackSafeFuture$Aoc19.flatMap, (function(x,y){
                  return function (v) {
                    return scanBeam$prime(x, y + 1 | 0, count + v | 0);
                  }
                  }(x,y)), runCoordinate(intCode, x, y));
      }
      _y = 0;
      _x = x + 1 | 0;
      continue ;
    };
  };
  return scanBeam$prime(0, 0, 0);
}

function findArea(intCode) {
  var check = function (next, param, r) {
    var y = param[1];
    var x = param[0];
    if (r === 0) {
      return StackSafeFuture$Aoc19.pure(0);
    } else {
      return Curry._2(StackSafeFuture$Aoc19.flatMap, (function (i) {
                    if (i === 0) {
                      return StackSafeFuture$Aoc19.pure(r);
                    } else {
                      return check(next, Curry._1(next, [
                                      x,
                                      y
                                    ]), r - 1 | 0);
                    }
                  }), runCoordinate(intCode, x, y));
    }
  };
  var checkX = function (param, param$1) {
    return check((function (param) {
                  return [
                          param[0] + 1 | 0,
                          param[1]
                        ];
                }), param, param$1);
  };
  var checkY = function (param, param$1) {
    return check((function (param) {
                  return [
                          param[0],
                          param[1] + 1 | 0
                        ];
                }), param, param$1);
  };
  var lessOne = function (v) {
    return Curry._2(Relude_Int.max, 1, v - 1 | 0);
  };
  var findArea$1 = function (x, y) {
    return Curry._2(StackSafeFuture$Aoc19.Infix.$great$great$eq, runCoordinate(intCode, x, y), (function (v) {
                  if (v === 1) {
                    return Curry._2(StackSafeFuture$Aoc19.Infix.$great$great$eq, checkY([
                                    x,
                                    y
                                  ], 100), (function (vy) {
                                  if (vy === 0) {
                                    return Curry._2(StackSafeFuture$Aoc19.Infix.$great$great$eq, checkX([
                                                    x,
                                                    y
                                                  ], 100), (function (vx) {
                                                  if (vx === 0) {
                                                    return StackSafeFuture$Aoc19.pure([
                                                                x,
                                                                y
                                                              ]);
                                                  } else {
                                                    return findArea$1(x, y + lessOne(vx) | 0);
                                                  }
                                                }));
                                  } else {
                                    return findArea$1(x + lessOne(vy) | 0, 0);
                                  }
                                }));
                  } else {
                    return findArea$1(x, y + 1 | 0);
                  }
                }));
  };
  return findArea$1(100, 100);
}

var Tractor = {
  runCoordinate: runCoordinate,
  scanBeam: scanBeam,
  findArea: findArea
};

var input = InputLoader$Aoc19.commaSeparated(19);

StackSafeFuture$Aoc19.tap(function (prim) {
        console.log(prim);
        
      })(Curry._2(StackSafeFuture$Aoc19.flatMap, scanBeam, input));

StackSafeFuture$Aoc19.tap(function (prim) {
        console.log(prim);
        
      })(Curry._2(StackSafeFuture$Aoc19.flatMap, findArea, input));

exports.Tractor = Tractor;
exports.input = input;
/* input Not a pure module */
