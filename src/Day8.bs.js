// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Relude_Int = require("relude/src/Relude_Int.bs.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Relude_Option = require("relude/src/Relude_Option.bs.js");
var Relude_String = require("relude/src/Relude_String.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");
var Relude_List_Specializations = require("relude/src/list/Relude_List_Specializations.bs.js");

var imageSize = 150;

var input = InputLoader$Aoc19.loadDay(8);

function chunk(string, size) {
  var loop = function (_remaining, _acc) {
    while(true) {
      var acc = _acc;
      var remaining = _remaining;
      var match = Relude_String.splitAt(size, remaining);
      var remaining$1 = match[1];
      var next = match[0];
      if (remaining$1 === "") {
        return /* :: */[
                next,
                acc
              ];
      } else {
        _acc = /* :: */[
          next,
          acc
        ];
        _remaining = remaining$1;
        continue ;
      }
    };
  };
  return Relude_List.reverse(loop(string, /* [] */0));
}

function images(string) {
  return Relude_List.map((function (param) {
                  return Relude_String.splitList("", param);
                }))(chunk(string, imageSize));
}

function digitCount(d) {
  return (function (param) {
      return Relude_Function.flipCompose((function (param) {
                    return Relude_List.filter((function (param) {
                                  return Caml_obj.caml_equal(d, param);
                                }), param);
                  }), Relude_List.length, param);
    });
}

function zeroCount(param) {
  return Relude_Function.flipCompose((function (param) {
                return Relude_List.filter((function (param) {
                              return Caml_obj.caml_equal("0", param);
                            }), param);
              }), Relude_List.length, param);
}

function compare(a, b) {
  return Curry._2(Relude_Int.Ord.compare, Curry._1(zeroCount, a), Curry._1(zeroCount, b));
}

function eq(a, b) {
  return Curry._1(zeroCount, a) === Curry._1(zeroCount, b);
}

var ZeroCountOrd = {
  eq: eq,
  compare: compare
};

function leastZeroes(images) {
  return Relude_Option.getOrThrow(Relude_List.head(Relude_List.sort(ZeroCountOrd, images)));
}

function onesTimesTwos(image) {
  return Caml_int32.imul(Relude_Function.flipCompose((function (param) {
                    return Relude_List.filter((function (param) {
                                  return Caml_obj.caml_equal("1", param);
                                }), param);
                  }), Relude_List.length, image), Relude_Function.flipCompose((function (param) {
                    return Relude_List.filter((function (param) {
                                  return Caml_obj.caml_equal("2", param);
                                }), param);
                  }), Relude_List.length, image));
}

var DecodingFailure = Caml_exceptions.create("Day8-Aoc19.DecodingFailure");

function displayImage(image) {
  return Relude_String.replaceEach("0", " ", Curry._2(Relude_List_Specializations.$$String.joinWith, "\n", chunk(image, 25)));
}

function decodedImage(imageStack) {
  var pixelLoop = function (_remainingStacks, _nextStack, _image) {
    while(true) {
      var image = _image;
      var nextStack = _nextStack;
      var remainingStacks = _remainingStacks;
      if (remainingStacks) {
        var match = remainingStacks[0];
        if (match) {
          var p = match[0];
          if (p === "2") {
            _nextStack = /* :: */[
              match[1],
              nextStack
            ];
            _remainingStacks = remainingStacks[1];
            continue ;
          } else {
            var image$1 = /* :: */[
              p,
              image
            ];
            var dropRest = Relude_List.map(Relude_List.tailOrEmpty)(remainingStacks[1]);
            var stack = Relude_List.concat(Relude_List.reverse(/* :: */[
                      match[1],
                      nextStack
                    ]), dropRest);
            _image = image$1;
            _nextStack = /* [] */0;
            _remainingStacks = stack;
            continue ;
          }
        } else {
          return Relude_List.reverse(image);
        }
      } else {
        throw [
              DecodingFailure,
              "All transparent"
            ];
      }
    };
  };
  return Curry._1(Relude_List_Specializations.$$String.join, pixelLoop(imageStack, /* [] */0, /* [] */0));
}

StackSafeFuture$Aoc19.tap((function (param) {
          return Relude_Function.flipCompose((function (param) {
                        return Relude_Function.flipCompose((function (param) {
                                      return Relude_Function.flipCompose(images, leastZeroes, param);
                                    }), onesTimesTwos, param);
                      }), (function (param) {
                        console.log("Least zeroes", param);
                        return /* () */0;
                      }), param);
        }))(input);

StackSafeFuture$Aoc19.tap((function (param) {
          return Relude_Function.flipCompose((function (param) {
                        return Relude_Function.flipCompose((function (param) {
                                      return Relude_Function.flipCompose((function (param) {
                                                    return Relude_Function.flipCompose(images, decodedImage, param);
                                                  }), displayImage, param);
                                    }), (function (param) {
                                      return "\nDecoded:\n" + param;
                                    }), param);
                      }), (function (prim) {
                        console.log(prim);
                        return /* () */0;
                      }), param);
        }))(input);

var $great$great = Relude_Function.flipCompose;

var width = 25;

var height = 6;

exports.$great$great = $great$great;
exports.width = width;
exports.height = height;
exports.imageSize = imageSize;
exports.input = input;
exports.chunk = chunk;
exports.images = images;
exports.digitCount = digitCount;
exports.ZeroCountOrd = ZeroCountOrd;
exports.leastZeroes = leastZeroes;
exports.onesTimesTwos = onesTimesTwos;
exports.DecodingFailure = DecodingFailure;
exports.displayImage = displayImage;
exports.decodedImage = decodedImage;
/* input Not a pure module */
