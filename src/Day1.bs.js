// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Future = require("reason-future/src/Future.bs.js");
var Relude_Int = require("relude/src/Relude_Int.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");
var InputLoader$Aoc19 = require("./InputLoader.bs.js");
var Relude_List_Specializations = require("relude/src/list/Relude_List_Specializations.bs.js");

function fuelRequired(mass) {
  return Curry._2(Relude_Int.max, 0, (mass / 3 | 0) - 2 | 0);
}

function totalFuelRequired(masses) {
  return Curry._1(Relude_List_Specializations.Int.sum, Relude_List.map(fuelRequired)(masses));
}

function fuelForFuel(mass) {
  var extraFuel = fuelRequired(mass);
  if (extraFuel === 0) {
    return 0;
  } else {
    return extraFuel + fuelForFuel(extraFuel) | 0;
  }
}

function fuelRequiredIncludingFuel(mass) {
  var fuelReqired = fuelRequired(mass);
  return fuelReqired + fuelForFuel(fuelReqired) | 0;
}

function totalFuelRequiredIncludingFuel(masses) {
  return Curry._1(Relude_List_Specializations.Int.sum, Relude_List.map(fuelRequiredIncludingFuel)(masses));
}

var input = InputLoader$Aoc19.loadDayAsList(1);

var partial_arg = Relude_List.map(Caml_format.caml_int_of_string);

var partial_arg$1 = Relude_Function.Infix.$great$great;

function partial_arg$2(param) {
  return partial_arg$1(partial_arg, totalFuelRequired, param);
}

var partial_arg$3 = Relude_Function.Infix.$great$great;

Future.tap(input, (function (param) {
        return partial_arg$3(partial_arg$2, (function (param) {
                      console.log("Fuel without extra fuel", param);
                      return /* () */0;
                    }), param);
      }));

var partial_arg$4 = Relude_List.map(Caml_format.caml_int_of_string);

var partial_arg$5 = Relude_Function.Infix.$great$great;

function partial_arg$6(param) {
  return partial_arg$5(partial_arg$4, totalFuelRequiredIncludingFuel, param);
}

var partial_arg$7 = Relude_Function.Infix.$great$great;

Future.tap(input, (function (param) {
        return partial_arg$7(partial_arg$6, (function (param) {
                      console.log("Fuel with fuel for fuel", param);
                      return /* () */0;
                    }), param);
      }));

exports.fuelRequired = fuelRequired;
exports.totalFuelRequired = totalFuelRequired;
exports.fuelForFuel = fuelForFuel;
exports.fuelRequiredIncludingFuel = fuelRequiredIncludingFuel;
exports.totalFuelRequiredIncludingFuel = totalFuelRequiredIncludingFuel;
exports.input = input;
/* input Not a pure module */
