// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Intcode$Aoc19 = require("./Intcode.bs.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");

function runWithInput(i, a, b) {
  return Intcode$Aoc19.run(Relude_List.replaceAt(2, b, Relude_List.replaceAt(1, a, i)));
}

var viableInput = Relude_List.makeWithIndex(100, Relude_Function.identity);

function findInput(input, desired) {
  var search = function (_nouns, _verbs) {
    while(true) {
      var verbs = _verbs;
      var nouns = _nouns;
      if (nouns) {
        if (verbs) {
          var vs = verbs[1];
          var verb = verbs[0];
          var ns = nouns[1];
          var noun = nouns[0];
          var matchesDesired = (function(noun,ns,verb,vs){
          return function matchesDesired(a) {
            if (a !== undefined && a === desired) {
              return StackSafeFuture$Aoc19.pure(Caml_int32.imul(noun, 100) + verb | 0);
            } else {
              return search(ns, /* :: */[
                          verb,
                          vs
                        ]);
            }
          }
          }(noun,ns,verb,vs));
          return Curry._2(StackSafeFuture$Aoc19.flatMap, matchesDesired, runWithInput(input, noun, verb));
        } else {
          return StackSafeFuture$Aoc19.pure(0);
        }
      } else if (verbs) {
        _verbs = verbs[1];
        _nouns = viableInput;
        continue ;
      } else {
        return StackSafeFuture$Aoc19.pure(0);
      }
    };
  };
  return search(viableInput, viableInput);
}

var input = InputLoader$Aoc19.commaSeparatedInts(2);

StackSafeFuture$Aoc19.tap((function (param) {
          console.log("Processed to:", param);
          return /* () */0;
        }))(Curry._2(StackSafeFuture$Aoc19.flatMap, (function (i) {
            return runWithInput(i, 12, 2);
          }), input));

StackSafeFuture$Aoc19.tap((function (param) {
          console.log("Desired at:", param);
          return /* () */0;
        }))(Curry._2(StackSafeFuture$Aoc19.flatMap, (function (i) {
            return findInput(i, 19690720);
          }), input));

exports.runWithInput = runWithInput;
exports.viableInput = viableInput;
exports.findInput = findInput;
exports.input = input;
/* viableInput Not a pure module */
