// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Intcode$Aoc19 = require("./Intcode.bs.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");
var InputLoader$Aoc19 = require("./lib/InputLoader.bs.js");
var StackSafeFuture$Aoc19 = require("./lib/StackSafeFuture.bs.js");

function runWithInput(i, a, b) {
  var replaced = Relude_List.replaceAt(2, String(b), Relude_List.replaceAt(1, String(a), i));
  return Intcode$Aoc19.run(undefined, undefined, replaced);
}

var viableInput = Relude_List.makeWithIndex(100, Relude_Function.identity);

function findInput(input, desired) {
  var search = function (_nouns, _verbs) {
    while(true) {
      var verbs = _verbs;
      var nouns = _nouns;
      if (nouns) {
        if (!verbs) {
          return StackSafeFuture$Aoc19.pure(0);
        }
        var vs = verbs.tl;
        var verb = verbs.hd;
        var ns = nouns.tl;
        var noun = nouns.hd;
        var matchesDesired = (function(noun,ns,verb,vs){
        return function matchesDesired(a) {
          var match = Caml_format.caml_int_of_string(a) === desired;
          if (match) {
            return StackSafeFuture$Aoc19.pure(Math.imul(noun, 100) + verb | 0);
          } else {
            return search(ns, {
                        hd: verb,
                        tl: vs
                      });
          }
        }
        }(noun,ns,verb,vs));
        return Curry._2(StackSafeFuture$Aoc19.flatMap, matchesDesired, runWithInput(input, noun, verb));
      }
      if (!verbs) {
        return StackSafeFuture$Aoc19.pure(0);
      }
      _verbs = verbs.tl;
      _nouns = viableInput;
      continue ;
    };
  };
  return search(viableInput, viableInput);
}

var input = InputLoader$Aoc19.commaSeparated(2);

StackSafeFuture$Aoc19.tap(function (param) {
        console.log("Processed to:", param);
        
      })(Curry._2(StackSafeFuture$Aoc19.flatMap, (function (i) {
            return runWithInput(i, 12, 2);
          }), input));

StackSafeFuture$Aoc19.tap(function (param) {
        console.log("Desired at:", param);
        
      })(Curry._2(StackSafeFuture$Aoc19.flatMap, (function (i) {
            return findInput(i, 19690720);
          }), input));

exports.runWithInput = runWithInput;
exports.viableInput = viableInput;
exports.findInput = findInput;
exports.input = input;
/* viableInput Not a pure module */
