// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Future = require("reason-future/src/Future.bs.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Relude_Array = require("relude/src/Relude_Array.bs.js");
var Relude_Option = require("relude/src/Relude_Option.bs.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");
var InputLoader$Aoc19 = require("./InputLoader.bs.js");

function doOp(fastLookup, op, a, b, c) {
  var l = Relude_Option.map((function (prim) {
          return prim[0];
        }), Relude_Array.at(a[0], fastLookup));
  var r = Relude_Option.map((function (prim) {
          return prim[0];
        }), Relude_Array.at(b[0], fastLookup));
  var c$1 = Relude_Array.at(c[0], fastLookup);
  var calculated = Curry._3(Relude_Option.map2, op, l, r);
  return Relude_Option.isSome(Curry._3(Relude_Option.map2, (function (v, state) {
                    v[0] = state;
                    return /* () */0;
                  }), c$1, calculated));
}

function run(intcode) {
  var tape = Relude_List.map((function (x) {
            return /* record */[/* contents */x];
          }))(intcode);
  var fastLookup = Relude_Array.fromList(tape);
  var doOp$1 = function (param, param$1, param$2, param$3) {
    return doOp(fastLookup, param, param$1, param$2, param$3);
  };
  var program = function (_tape) {
    while(true) {
      var tape = _tape;
      var $$continue;
      if (tape) {
        var match = tape[0][/* contents */0];
        var switcher = match - 1 | 0;
        if (switcher === 0 || switcher === 1) {
          if (switcher !== 0) {
            var match$1 = tape[1];
            if (match$1) {
              var match$2 = match$1[1];
              if (match$2) {
                var match$3 = match$2[1];
                if (match$3) {
                  $$continue = doOp$1(Caml_int32.imul, match$1[0], match$2[0], match$3[0]) ? match$3[1] : undefined;
                } else {
                  console.error("Unknown op");
                  $$continue = undefined;
                }
              } else {
                console.error("Unknown op");
                $$continue = undefined;
              }
            } else {
              console.error("Unknown op");
              $$continue = undefined;
            }
          } else {
            var match$4 = tape[1];
            if (match$4) {
              var match$5 = match$4[1];
              if (match$5) {
                var match$6 = match$5[1];
                if (match$6) {
                  $$continue = doOp$1((function (prim, prim$1) {
                          return prim + prim$1 | 0;
                        }), match$4[0], match$5[0], match$6[0]) ? match$6[1] : undefined;
                } else {
                  console.error("Unknown op");
                  $$continue = undefined;
                }
              } else {
                console.error("Unknown op");
                $$continue = undefined;
              }
            } else {
              console.error("Unknown op");
              $$continue = undefined;
            }
          }
        } else if (switcher !== 98) {
          console.error("Unknown op");
          $$continue = undefined;
        } else {
          $$continue = undefined;
        }
      } else {
        console.error("Unknown op");
        $$continue = undefined;
      }
      if ($$continue !== undefined) {
        _tape = $$continue;
        continue ;
      } else {
        return /* () */0;
      }
    };
  };
  program(tape);
  return Relude_Option.map((function (prim) {
                return prim[0];
              }), Relude_List.head(tape));
}

function runWithInput(i, a, b) {
  return run(Relude_List.replaceAt(2, b, Relude_List.replaceAt(1, a, i)));
}

var viableInput = Relude_List.makeWithIndex(100, Relude_Function.identity);

function findInput(input, desired) {
  var _nouns = viableInput;
  var _verbs = viableInput;
  while(true) {
    var verbs = _verbs;
    var nouns = _nouns;
    if (nouns) {
      if (verbs) {
        var vs = verbs[1];
        var verb = verbs[0];
        var ns = nouns[1];
        var noun = nouns[0];
        var match = runWithInput(input, noun, verb);
        if (match !== undefined) {
          if (match === desired) {
            return Caml_int32.imul(100, noun) + verb | 0;
          } else {
            _verbs = /* :: */[
              verb,
              vs
            ];
            _nouns = ns;
            continue ;
          }
        } else {
          _verbs = /* :: */[
            verb,
            vs
          ];
          _nouns = ns;
          continue ;
        }
      } else {
        return ;
      }
    } else if (verbs) {
      _verbs = verbs[1];
      _nouns = viableInput;
      continue ;
    } else {
      return ;
    }
  };
}

var input = InputLoader$Aoc19.commaSeparatedInts(2);

Future.tap(input, (function (i) {
        console.log("Processed to:", runWithInput(i, 12, 2));
        return /* () */0;
      }));

Future.tap(input, (function (i) {
        console.log("Desired at:", findInput(i, 19690720));
        return /* () */0;
      }));

exports.doOp = doOp;
exports.run = run;
exports.runWithInput = runWithInput;
exports.viableInput = viableInput;
exports.findInput = findInput;
exports.input = input;
/* viableInput Not a pure module */
