// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Relude_String = require("relude/src/Relude_String.bs.js");
var Relude_Function = require("relude/src/Relude_Function.bs.js");

var $great$great = Relude_Function.Infix.$great$great;

function containsDoubleDigit(string) {
  return Curry._2(Relude_List.any, (function (search) {
                return Relude_String.contains(search, string);
              }), {
              hd: "00",
              tl: {
                hd: "11",
                tl: {
                  hd: "22",
                  tl: {
                    hd: "33",
                    tl: {
                      hd: "44",
                      tl: {
                        hd: "55",
                        tl: {
                          hd: "66",
                          tl: {
                            hd: "77",
                            tl: {
                              hd: "88",
                              tl: {
                                hd: "99",
                                tl: /* [] */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            });
}

function containsDoubleDigitAlone(string) {
  var digits = Relude_String.splitList("", string);
  if (!digits) {
    return false;
  }
  var match = digits.tl;
  if (!match) {
    return false;
  }
  var match$1 = match.tl;
  if (!match$1) {
    return false;
  }
  var match$2 = match$1.tl;
  if (!match$2) {
    return false;
  }
  var match$3 = match$2.tl;
  if (!match$3) {
    return false;
  }
  var match$4 = match$3.tl;
  if (!match$4) {
    return false;
  }
  if (match$4.tl) {
    return false;
  }
  var c = match$1.hd;
  var b = match.hd;
  var a = digits.hd;
  if (a === b && b !== c) {
    return true;
  }
  var d = match$2.hd;
  if (a !== b && b === c && c !== d) {
    return true;
  }
  var d$1 = match$3.hd;
  if (b !== c && c === d && d !== d$1) {
    return true;
  }
  var d$2 = match$4.hd;
  if (c !== d && d === d$1 && d$1 !== d$2) {
    return true;
  } else if (d !== d$1) {
    return d$1 === d$2;
  } else {
    return false;
  }
}

function increasingDigits(string) {
  var digits = Relude_List.map(Caml_format.caml_int_of_string)(Relude_String.splitList("", string));
  return Curry._2(Relude_List.all, (function (param) {
                return param[0] <= param[1];
              }), Relude_List.zip(Relude_List.initOrEmpty(digits), Relude_List.tailOrEmpty(digits)));
}

function validPassword(string) {
  if (containsDoubleDigit(string)) {
    return increasingDigits(string);
  } else {
    return false;
  }
}

function validPasswordNew(string) {
  if (containsDoubleDigitAlone(string)) {
    return increasingDigits(string);
  } else {
    return false;
  }
}

var range = Relude_List.makeWithIndex(490043, (function (i) {
        return String(i + 356261 | 0);
      }));

console.log("Potential passwords amount: ", Curry._1(Relude_List.length, Relude_List.filter(validPassword, range)));

console.log("New potential passwords amount: ", Curry._1(Relude_List.length, Relude_List.filter(validPasswordNew, range)));

var min = 356261;

var max = 846303;

exports.min = min;
exports.max = max;
exports.$great$great = $great$great;
exports.containsDoubleDigit = containsDoubleDigit;
exports.containsDoubleDigitAlone = containsDoubleDigitAlone;
exports.increasingDigits = increasingDigits;
exports.validPassword = validPassword;
exports.validPasswordNew = validPasswordNew;
exports.range = range;
/* range Not a pure module */
